/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AboutRouteImport } from './routes/about'
import { Route as ChainRouteRouteImport } from './routes/chain/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PptIndexRouteImport } from './routes/ppt/index'
import { Route as KisanIndexRouteImport } from './routes/kisan/index'
import { Route as ChainIndexRouteImport } from './routes/chain/index'
import { Route as ChainLivechainRouteImport } from './routes/chain/livechain'

const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const ChainRouteRoute = ChainRouteRouteImport.update({
  id: '/chain',
  path: '/chain',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PptIndexRoute = PptIndexRouteImport.update({
  id: '/ppt/',
  path: '/ppt/',
  getParentRoute: () => rootRouteImport,
} as any)
const KisanIndexRoute = KisanIndexRouteImport.update({
  id: '/kisan/',
  path: '/kisan/',
  getParentRoute: () => rootRouteImport,
} as any)
const ChainIndexRoute = ChainIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ChainRouteRoute,
} as any)
const ChainLivechainRoute = ChainLivechainRouteImport.update({
  id: '/livechain',
  path: '/livechain',
  getParentRoute: () => ChainRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/chain': typeof ChainRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/chain/livechain': typeof ChainLivechainRoute
  '/chain/': typeof ChainIndexRoute
  '/kisan': typeof KisanIndexRoute
  '/ppt': typeof PptIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/chain/livechain': typeof ChainLivechainRoute
  '/chain': typeof ChainIndexRoute
  '/kisan': typeof KisanIndexRoute
  '/ppt': typeof PptIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/chain': typeof ChainRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/chain/livechain': typeof ChainLivechainRoute
  '/chain/': typeof ChainIndexRoute
  '/kisan/': typeof KisanIndexRoute
  '/ppt/': typeof PptIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/chain'
    | '/about'
    | '/chain/livechain'
    | '/chain/'
    | '/kisan'
    | '/ppt'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/about' | '/chain/livechain' | '/chain' | '/kisan' | '/ppt'
  id:
    | '__root__'
    | '/'
    | '/chain'
    | '/about'
    | '/chain/livechain'
    | '/chain/'
    | '/kisan/'
    | '/ppt/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ChainRouteRoute: typeof ChainRouteRouteWithChildren
  AboutRoute: typeof AboutRoute
  KisanIndexRoute: typeof KisanIndexRoute
  PptIndexRoute: typeof PptIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/chain': {
      id: '/chain'
      path: '/chain'
      fullPath: '/chain'
      preLoaderRoute: typeof ChainRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ppt/': {
      id: '/ppt/'
      path: '/ppt'
      fullPath: '/ppt'
      preLoaderRoute: typeof PptIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/kisan/': {
      id: '/kisan/'
      path: '/kisan'
      fullPath: '/kisan'
      preLoaderRoute: typeof KisanIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/chain/': {
      id: '/chain/'
      path: '/'
      fullPath: '/chain/'
      preLoaderRoute: typeof ChainIndexRouteImport
      parentRoute: typeof ChainRouteRoute
    }
    '/chain/livechain': {
      id: '/chain/livechain'
      path: '/livechain'
      fullPath: '/chain/livechain'
      preLoaderRoute: typeof ChainLivechainRouteImport
      parentRoute: typeof ChainRouteRoute
    }
  }
}

interface ChainRouteRouteChildren {
  ChainLivechainRoute: typeof ChainLivechainRoute
  ChainIndexRoute: typeof ChainIndexRoute
}

const ChainRouteRouteChildren: ChainRouteRouteChildren = {
  ChainLivechainRoute: ChainLivechainRoute,
  ChainIndexRoute: ChainIndexRoute,
}

const ChainRouteRouteWithChildren = ChainRouteRoute._addFileChildren(
  ChainRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ChainRouteRoute: ChainRouteRouteWithChildren,
  AboutRoute: AboutRoute,
  KisanIndexRoute: KisanIndexRoute,
  PptIndexRoute: PptIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
